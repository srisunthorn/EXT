//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.5456.
// 
namespace GodApp1.exedyWebservice {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'EndpointReference' from namespace 'http://www.w3.org/2005/08/addressing' was not handled.
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WSHttpBinding_ICalculator", Namespace="http://tempuri.org/")]
    public partial class CalculatorService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public CalculatorService() {
            this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
            this.Url = "http://exedy-erp-02.exedy-thai:99/service.svc";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICalculator/Add", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Add(double n1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n1Specified, double n2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n2Specified, out double AddResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AddResultSpecified) {
            object[] results = this.Invoke("Add", new object[] {
                        n1,
                        n1Specified,
                        n2,
                        n2Specified});
            AddResult = ((double)(results[0]));
            AddResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAdd(double n1, bool n1Specified, double n2, bool n2Specified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Add", new object[] {
                        n1,
                        n1Specified,
                        n2,
                        n2Specified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAdd(System.IAsyncResult asyncResult, out double AddResult, out bool AddResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            AddResult = ((double)(results[0]));
            AddResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICalculator/Subtract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Subtract(double n1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n1Specified, double n2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n2Specified, out double SubtractResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SubtractResultSpecified) {
            object[] results = this.Invoke("Subtract", new object[] {
                        n1,
                        n1Specified,
                        n2,
                        n2Specified});
            SubtractResult = ((double)(results[0]));
            SubtractResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubtract(double n1, bool n1Specified, double n2, bool n2Specified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Subtract", new object[] {
                        n1,
                        n1Specified,
                        n2,
                        n2Specified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSubtract(System.IAsyncResult asyncResult, out double SubtractResult, out bool SubtractResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            SubtractResult = ((double)(results[0]));
            SubtractResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICalculator/Multiply", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Multiply(double n1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n1Specified, double n2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n2Specified, out double MultiplyResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool MultiplyResultSpecified) {
            object[] results = this.Invoke("Multiply", new object[] {
                        n1,
                        n1Specified,
                        n2,
                        n2Specified});
            MultiplyResult = ((double)(results[0]));
            MultiplyResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMultiply(double n1, bool n1Specified, double n2, bool n2Specified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Multiply", new object[] {
                        n1,
                        n1Specified,
                        n2,
                        n2Specified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMultiply(System.IAsyncResult asyncResult, out double MultiplyResult, out bool MultiplyResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            MultiplyResult = ((double)(results[0]));
            MultiplyResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICalculator/Divide", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Divide(double n1, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n1Specified, double n2, [System.Xml.Serialization.XmlIgnoreAttribute()] bool n2Specified, out double DivideResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DivideResultSpecified) {
            object[] results = this.Invoke("Divide", new object[] {
                        n1,
                        n1Specified,
                        n2,
                        n2Specified});
            DivideResult = ((double)(results[0]));
            DivideResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDivide(double n1, bool n1Specified, double n2, bool n2Specified, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Divide", new object[] {
                        n1,
                        n1Specified,
                        n2,
                        n2Specified}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDivide(System.IAsyncResult asyncResult, out double DivideResult, out bool DivideResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            DivideResult = ((double)(results[0]));
            DivideResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ICalculator/Text", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Text() {
            object[] results = this.Invoke("Text", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginText(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Text", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndText(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
}
